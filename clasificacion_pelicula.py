# Ejercicio: Verificador de Edad para Pel√≠culas usando Funciones
# Versi√≥n completa con documentaci√≥n detallada y pruebas con asserts


def obtener_clasificacion_pelicula(edad_persona):
    """
    Determina qu√© tipo de pel√≠culas puede ver una persona seg√∫n su edad.

    Esta funci√≥n eval√∫a la edad de una persona y devuelve un mensaje
    indicando qu√© clasificaciones de pel√≠culas puede ver seg√∫n las
    normas est√°ndar de la industria cinematogr√°fica.

    Args:
        edad_persona (int): La edad de la persona en a√±os. 
                           Debe ser un n√∫mero entero positivo.

    Returns:
        str: Un mensaje que indica la clasificaci√≥n de pel√≠culas
             que la persona puede ver seg√∫n su edad:
             - Para menores de 13: pel√≠culas G o PG
             - Para 13-17 a√±os: pel√≠culas PG-13
             - Para 18 a√±os o m√°s: pel√≠culas R
             - Para edades inv√°lidas: mensaje de error

    Examples:
        >>> obtener_clasificacion_pelicula(10)
        'Te recomendamos pel√≠culas clasificadas G o PG.'

        >>> obtener_clasificacion_pelicula(15)
        'Puedes ver pel√≠culas clasificadas PG-13.'

        >>> obtener_clasificacion_pelicula(20)
        '¬°Puedes ver pel√≠culas clasificadas R!'

    Note:
        Esta funci√≥n NO utiliza input() ni print() para ser reutilizable.
        Solo procesa datos y retorna resultados.
    """

    # Validaci√≥n: Verificar que la edad est√© en un rango v√°lido
    if edad_persona < 0 or edad_persona > 120:
        return "Edad no v√°lida."

    # Clasificaci√≥n para ni√±os (menores de 13 a√±os)
    if edad_persona < 13:
        return "Te recomendamos pel√≠culas clasificadas G o PG."

    # Clasificaci√≥n para adolescentes (13 a 17 a√±os)
    elif edad_persona < 18:
        return "Puedes ver pel√≠culas clasificadas PG-13."

    # Clasificaci√≥n para adultos (18 a√±os o m√°s)
    else:  # edad_persona >= 18
        return "¬°Puedes ver pel√≠culas clasificadas R!"


# =============================================================================
# SECCI√ìN DE PRUEBAS CON ASSERTS
# =============================================================================
# ¬°IMPORTANTE! Las pruebas van DESPU√âS de definir la funci√≥n
# pero ANTES del programa principal que interact√∫a con el usuario


def ejecutar_pruebas():
    """
    Ejecuta todas las pruebas unitarias para verificar que la funci√≥n
    obtener_clasificacion_pelicula() funciona correctamente.

    Utiliza asserts para validar diferentes casos de prueba:
    - Casos l√≠mite (edades en los bordes de cada clasificaci√≥n)
    - Casos normales (edades t√≠picas en cada rango)
    - Casos de error (edades inv√°lidas)

    Raises:
        AssertionError: Si alguna prueba falla, se detiene la ejecuci√≥n
                       y muestra qu√© prueba espec√≠fica fall√≥.
    """

    print(
        "üß™ Ejecutando pruebas de la funci√≥n obtener_clasificacion_pelicula()..."
    )
    print("=" * 60)

    # PRUEBAS PARA ADULTOS (18 a√±os o m√°s)
    # Caso normal: adulto joven
    assert obtener_clasificacion_pelicula(20) == "¬°Puedes ver pel√≠culas clasificadas R!", \
        "Prueba fallida: Adulto de 20 a√±os"
    print("‚úÖ Prueba 1 PASADA: Adulto de 20 a√±os")

    # Caso l√≠mite: exactamente 18 a√±os (l√≠mite inferior de adultos)
    assert obtener_clasificacion_pelicula(18) == "¬°Puedes ver pel√≠culas clasificadas R!", \
        "Prueba fallida: L√≠mite Adulto (18 a√±os)"
    print("‚úÖ Prueba 2 PASADA: L√≠mite adulto (18 a√±os)")

    # Caso normal: adulto mayor
    assert obtener_clasificacion_pelicula(65) == "¬°Puedes ver pel√≠culas clasificadas R!", \
        "Prueba fallida: Adulto mayor"
    print("‚úÖ Prueba 3 PASADA: Adulto mayor de 65 a√±os")

    # PRUEBAS PARA ADOLESCENTES (13-17 a√±os)
    # Caso normal: adolescente t√≠pico
    assert obtener_clasificacion_pelicula(15) == "Puedes ver pel√≠culas clasificadas PG-13.", \
        "Prueba fallida: Adolescente de 15 a√±os"
    print("‚úÖ Prueba 4 PASADA: Adolescente de 15 a√±os")

    # Caso l√≠mite: exactamente 13 a√±os (l√≠mite inferior de adolescentes)
    assert obtener_clasificacion_pelicula(13) == "Puedes ver pel√≠culas clasificadas PG-13.", \
        "Prueba fallida: L√≠mite Adolescente (13 a√±os)"
    print("‚úÖ Prueba 5 PASADA: L√≠mite adolescente (13 a√±os)")

    # Caso l√≠mite: 17 a√±os (l√≠mite superior de adolescentes)
    assert obtener_clasificacion_pelicula(17) == "Puedes ver pel√≠culas clasificadas PG-13.", \
        "Prueba fallida: Adolescente de 17 a√±os"
    print("‚úÖ Prueba 6 PASADA: Adolescente de 17 a√±os")

    # PRUEBAS PARA NI√ëOS (menores de 13 a√±os)
    # Caso normal: ni√±o t√≠pico
    assert obtener_clasificacion_pelicula(10) == "Te recomendamos pel√≠culas clasificadas G o PG.", \
        "Prueba fallida: Ni√±o de 10 a√±os"
    print("‚úÖ Prueba 7 PASADA: Ni√±o de 10 a√±os")

    # Caso l√≠mite: ni√±o muy peque√±o
    assert obtener_clasificacion_pelicula(5) == "Te recomendamos pel√≠culas clasificadas G o PG.", \
        "Prueba fallida: Ni√±o de 5 a√±os"
    print("‚úÖ Prueba 8 PASADA: Ni√±o de 5 a√±os")

    # Caso l√≠mite: 12 a√±os (l√≠mite superior de ni√±os)
    assert obtener_clasificacion_pelicula(12) == "Te recomendamos pel√≠culas clasificadas G o PG.", \
        "Prueba fallida: Ni√±o de 12 a√±os"
    print("‚úÖ Prueba 9 PASADA: Ni√±o de 12 a√±os")

    # PRUEBAS PARA CASOS DE ERROR (edades inv√°lidas)
    # Edad negativa
    assert obtener_clasificacion_pelicula(-5) == "Edad no v√°lida.", \
        "Prueba fallida: Edad negativa"
    print("‚úÖ Prueba 10 PASADA: Edad negativa (-5)")

    # Edad excesivamente alta
    assert obtener_clasificacion_pelicula(150) == "Edad no v√°lida.", \
        "Prueba fallida: Edad excesivamente alta"
    print("‚úÖ Prueba 11 PASADA: Edad excesivamente alta (150)")

    # Caso l√≠mite: edad 0
    assert obtener_clasificacion_pelicula(0) == "Te recomendamos pel√≠culas clasificadas G o PG.", \
        "Prueba fallida: Edad 0 a√±os"
    print("‚úÖ Prueba 12 PASADA: Beb√© de 0 a√±os")

    print("=" * 60)
    print("üéâ ¬°TODAS LAS PRUEBAS PASARON EXITOSAMENTE!")
    print(
        "üõ°Ô∏è  Nuestra funci√≥n es robusta y maneja todos los casos correctamente."
    )
    print()


def obtener_edad_usuario():
    """
    Solicita la edad al usuario y valida que sea un n√∫mero entero v√°lido.

    Maneja errores de entrada del usuario (como letras en lugar de n√∫meros)
    y sigue pidiendo la edad hasta que se ingrese un valor v√°lido.

    Returns:
        int: La edad ingresada por el usuario (n√∫mero entero v√°lido)

    Note:
        Esta funci√≥n utiliza un bucle while para seguir pidiendo
        la edad hasta que el usuario ingrese un n√∫mero v√°lido.
    """

    while True:  # Bucle infinito hasta obtener entrada v√°lida
        try:
            # Intentar convertir la entrada del usuario a entero
            edad = int(input("Por favor, ingresa tu edad: "))
            return edad  # Si la conversi√≥n es exitosa, retornar la edad

        except ValueError:
            # Si el usuario ingres√≥ algo que no es un n√∫mero
            print("‚ùå Error: Debes ingresar un n√∫mero entero v√°lido.")
            print("   Ejemplos v√°lidos: 15, 25, 30")
            print("   Ejemplos inv√°lidos: 'quince', '25.5', 'abc'")
            print()


def mostrar_resultado(edad, mensaje):
    """
    Muestra el resultado de la clasificaci√≥n de pel√≠cula de manera formateada.

    Args:
        edad (int): La edad de la persona
        mensaje (str): El mensaje de clasificaci√≥n devuelto por la funci√≥n

    Note:
        Esta funci√≥n se encarga √∫nicamente de la presentaci√≥n visual
        del resultado, separando la l√≥gica de negocio de la presentaci√≥n.
    """

    print("\n" + "=" * 50)
    print("üé¨ RESULTADO DE CLASIFICACI√ìN DE PEL√çCULAS")
    print("=" * 50)
    print(f"üë§ Edad ingresada: {edad} a√±os")
    print(f"üé≠ Clasificaci√≥n: {mensaje}")
    print("=" * 50)


def main():
    """
    Funci√≥n principal del programa que coordina toda la ejecuci√≥n.

    Esta funci√≥n:
    1. Muestra el t√≠tulo del programa
    2. Ejecuta las pruebas para verificar que todo funciona
    3. Solicita la edad al usuario
    4. Llama a la funci√≥n de clasificaci√≥n
    5. Muestra el resultado

    Note:
        Separa claramente las responsabilidades: pruebas, entrada de datos,
        procesamiento y salida de datos.
    """

    # Mostrar t√≠tulo del programa
    print("üé¨" * 20)
    print("    VERIFICADOR DE EDAD PARA PEL√çCULAS")
    print("üé¨" * 20)
    print()

    # Ejecutar pruebas primero para asegurar que todo funciona
    ejecutar_pruebas()

    # Programa principal de interacci√≥n con el usuario
    print("üìù Ahora vamos a verificar TU edad para pel√≠culas...")
    print()

    # Obtener edad del usuario con validaci√≥n
    edad_ingresada = obtener_edad_usuario()

    # Llamar a nuestra funci√≥n principal para obtener la clasificaci√≥n
    mensaje_cine = obtener_clasificacion_pelicula(edad_ingresada)

    # Mostrar el resultado de manera formateada
    mostrar_resultado(edad_ingresada, mensaje_cine)

    # Mensaje de despedida
    print("\nüé≠ ¬°Gracias por usar nuestro verificador de edad!")
    print("   ¬°Disfruta de tus pel√≠culas! üçø")


# =============================================================================
# PUNTO DE ENTRADA DEL PROGRAMA
# =============================================================================
# Esta secci√≥n se ejecuta solo cuando el archivo se ejecuta directamente
# (no cuando se importa como m√≥dulo en otro archivo)

if __name__ == "__main__":
    """
    Punto de entrada principal del programa.

    El uso de 'if __name__ == "__main__":' es una buena pr√°ctica que
    permite que este c√≥digo se ejecute solo cuando el archivo se ejecuta
    directamente, pero no cuando se importa desde otro archivo.
    """

    # Ejecutar el programa principal
    main()
